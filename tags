!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Ctags	k,kind	/kind definitions/
!_TAG_KIND_DESCRIPTION!Ctags	l,langdef	/language definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	1.1	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Ctags	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/esmaeil/Documents/Coding/libft_master/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.2.0	/c06d333b3/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(NAME)	Makefile	/^$(NAME): $(OBJS)$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
APP_DIR	Makefile	/^APP_DIR = $(SRC_DIR)\/app$/;"	m
BONUS_FUNC_COUNT	src/data/bonus.c	/^const int BONUS_FUNC_COUNT = sizeof(bonus_functions) \/ sizeof(LibFunc);$/;"	v	typeref:typename:const int
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -Iincludes$/;"	m
CHAR_FUNC_COUNT	src/data/char.c	/^const int CHAR_FUNC_COUNT = sizeof(char_functions) \/ sizeof(LibFunc);$/;"	v	typeref:typename:const int
CONV_FUNC_COUNT	src/data/conv.c	/^const int CONV_FUNC_COUNT = sizeof(conv_functions) \/ sizeof(LibFunc);$/;"	v	typeref:typename:const int
COPY_MODE	includes/libft_master.h	/^    COPY_MODE = 1,$/;"	e	enum:e_mode
DATA_DIR	Makefile	/^DATA_DIR = $(SRC_DIR)\/data$/;"	m
FUNC_COUNT	includes/libft_master.h	/^#define FUNC_COUNT /;"	d
LIBFT_MASTER_H	includes/libft_master.h	/^#define LIBFT_MASTER_H$/;"	d
LibFunc	includes/libft_master.h	/^}	LibFunc;$/;"	t	typeref:struct:s_libfunc
Libft - Hunter	README.md	/^# Libft - Hunter$/;"	c
MAX_INPUT	includes/libft_master.h	/^#define MAX_INPUT /;"	d
Mode	includes/libft_master.h	/^} Mode;$/;"	t	typeref:enum:e_mode
NAME	Makefile	/^NAME = libft_master$/;"	m
OBJS	Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
RECALL_MODE	includes/libft_master.h	/^    RECALL_MODE = 2$/;"	e	enum:e_mode
SRCS	Makefile	/^SRCS = \\$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
all	Makefile	/^all: $(NAME)$/;"	t
bonus_functions	src/data/bonus.c	/^LibFunc bonus_functions[] = {$/;"	v	typeref:typename:LibFunc[]
char_functions	src/data/char.c	/^LibFunc char_functions[] = {$/;"	v	typeref:typename:LibFunc[]
clean	Makefile	/^clean:$/;"	t
code	includes/libft_master.h	/^	const char	*code;$/;"	m	struct:s_libfunc	typeref:typename:const char *
content	includes/libft_master.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
conv_functions	src/data/conv.c	/^LibFunc conv_functions[] = {$/;"	v	typeref:typename:LibFunc[]
description	includes/libft_master.h	/^	const char	*description;$/;"	m	struct:s_libfunc	typeref:typename:const char *
e_mode	includes/libft_master.h	/^typedef enum e_mode {$/;"	g
fclean	Makefile	/^fclean: clean$/;"	t
get_bonus_function_by_index	src/data/bonus.c	/^LibFunc get_bonus_function_by_index(int index)$/;"	f	typeref:typename:LibFunc
get_bonus_function_count	src/data/bonus.c	/^int get_bonus_function_count(void)$/;"	f	typeref:typename:int
get_char_function_by_index	src/data/char.c	/^LibFunc get_char_function_by_index(int index)$/;"	f	typeref:typename:LibFunc
get_char_function_count	src/data/char.c	/^int get_char_function_count(void)$/;"	f	typeref:typename:int
get_conv_function_by_index	src/data/conv.c	/^LibFunc get_conv_function_by_index(int index)$/;"	f	typeref:typename:LibFunc
get_conv_function_count	src/data/conv.c	/^int get_conv_function_count(void)$/;"	f	typeref:typename:int
get_function_by_index	src/app/function_dispatch.c	/^LibFunc get_function_by_index(int index)$/;"	f	typeref:typename:LibFunc
get_function_count	src/app/function_dispatch.c	/^int get_function_count(void)$/;"	f	typeref:typename:int
get_memory_function_by_index	src/data/memory.c	/^LibFunc get_memory_function_by_index(int index) {$/;"	f	typeref:typename:LibFunc
get_memory_function_count	src/data/memory.c	/^int get_memory_function_count(void) {$/;"	f	typeref:typename:int
get_string_function_by_index	src/data/string.c	/^LibFunc get_string_function_by_index(int index) {$/;"	f	typeref:typename:LibFunc
get_string_function_count	src/data/string.c	/^int get_string_function_count(void) {$/;"	f	typeref:typename:int
get_user_input	src/app/utils.c	/^void get_user_input(char *buffer, size_t size) {$/;"	f	typeref:typename:void
main	src/app/main.c	/^int main(void)$/;"	f	typeref:typename:int
memory_functions	src/data/memory.c	/^LibFunc memory_functions[] = {$/;"	v	typeref:typename:LibFunc[]
name	includes/libft_master.h	/^	const char	*name;$/;"	m	struct:s_libfunc	typeref:typename:const char *
next	includes/libft_master.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
print_category_menu	src/app/main.c	/^void print_category_menu(void)$/;"	f	typeref:typename:void
print_function_list	src/app/utils.c	/^void print_function_list(LibFunc (*get_func_by_index)(int), int count) {$/;"	f	typeref:typename:void
print_mode_menu	src/app/main.c	/^void print_mode_menu(void)$/;"	f	typeref:typename:void
re	Makefile	/^re: fclean all$/;"	t
run_mode	src/app/typing_modes.c	/^void run_mode(Mode mode, LibFunc *func) {$/;"	f	typeref:typename:void
run_typing_session	src/app/mode_runner.c	/^void run_typing_session(Mode mode,$/;"	f	typeref:typename:void
s_libfunc	includes/libft_master.h	/^typedef struct s_libfunc$/;"	s
s_list	includes/libft_master.h	/^typedef struct s_list$/;"	s
string_functions	src/data/string.c	/^LibFunc string_functions[] = {$/;"	v	typeref:typename:LibFunc[]
t_list	includes/libft_master.h	/^}	t_list;$/;"	t	typeref:struct:s_list
